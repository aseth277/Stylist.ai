// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates outfit suggestions based on user's wardrobe and displays them on a 3D avatar.
 *
 * - generateOutfitSuggestions - A function that generates outfit suggestions.
 * - GenerateOutfitSuggestionsInput - The input type for the generateOutfitSuggestions function.
 * - GenerateOutfitSuggestionsOutput - The return type for the generateOutfitSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateOutfitSuggestionsInputSchema = z.object({
  wardrobeDescription: z
    .string()
    .describe('Description of the user wardrobe items, styles, and colors.'),
  avatarStyle: z.string().describe('Style of the 3D avatar (e.g., realistic, cartoonish).'),
});
export type GenerateOutfitSuggestionsInput = z.infer<
  typeof GenerateOutfitSuggestionsInputSchema
>;

const GenerateOutfitSuggestionsOutputSchema = z.object({
  outfitSuggestion: z
    .string()
    .describe('Description of the suggested outfit, including items and styles.'),
  avatarImage: z
    .string()
    .describe(
      'A data URI of the 3D avatar wearing the suggested outfit, must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // Per guidance, images are passed as data URIs
    ),
});
export type GenerateOutfitSuggestionsOutput = z.infer<
  typeof GenerateOutfitSuggestionsOutputSchema
>;

export async function generateOutfitSuggestions(
  input: GenerateOutfitSuggestionsInput
): Promise<GenerateOutfitSuggestionsOutput> {
  return generateOutfitSuggestionsFlow(input);
}

const outfitPrompt = ai.definePrompt({
  name: 'outfitSuggestionPrompt',
  input: {schema: GenerateOutfitSuggestionsInputSchema},
  output: {schema: GenerateOutfitSuggestionsOutputSchema},
  prompt: `You are a personal stylist AI assistant. Given a user's wardrobe description and desired avatar style, generate a stylish outfit suggestion and create an image of a 3D avatar wearing the outfit.

Wardrobe Description: {{{wardrobeDescription}}}
Avatar Style: {{{avatarStyle}}}

Create an outfit suggestion that reflects the user's style and looks great on the 3D avatar. Then generate a photorealistic image of the avatar wearing the suggested outfit. Return the outfit suggestion and the image data URI. The data URI must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.`,
});

const generateOutfitSuggestionsFlow = ai.defineFlow(
  {
    name: 'generateOutfitSuggestionsFlow',
    inputSchema: GenerateOutfitSuggestionsInputSchema,
    outputSchema: GenerateOutfitSuggestionsOutputSchema,
  },
  async input => {
    // Generate outfit suggestion and avatar image using the prompt
    const {output} = await outfitPrompt(input);

    return output!;
  }
);
